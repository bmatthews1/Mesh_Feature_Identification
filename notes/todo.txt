Create Standalone Node.js Web App:
--------------------------
    [ ] App boilerplate
        [*] Add server.js
        [*] Import Three.js GLTFLoader
        [*] Add WebGL boilerplate
        [*] load and glb fil with GLTFLoader
        [*] display model with vertex coloring
        [*] load JSON files
        [ ] load and parse .cs file

    [ ] UI and Controls:
        [ ] Camera
            [*] Orbit
            [*] Zoom
            [ ] Pan
            [*] Camera automatically zooms to fit object in viewport (use gltf bouning regions)
        [ ] Menu and Interface
            [ ] Dropdown displaying Groups along with element information
            [ ] Click to select group on canvas
                [ ] ID based buffer render and click indexing
            [ ] Click to select group in dropdown

    [ ] Main functionality
        [ ] GLTFLoader: Map faces -> Entity Id's -> Model Index 
        [ ] Add algorithm to raycast through triangles
            [ ] Flag each face as part of a pocket or not
            [ ] Use loaded adjacency information to create pocket groups

    [ ] Refactor:
        [*] Move webgl boilerplate code into its own js file
        [ ] Add a "Mesh" class that can render individual meshes
        [ ] Pull Camera "lookAt" code out into its own function

    [ ] Issues:
        [ ] Lighting calculations are currently incorrect (needs updating)
        [ ] Lighting has been disabled temporarily (due to vertexAttribIndex collisions from shader optimizations)
            [ ] Need to re-enable lighting and vertex normals
            [ ] Need to rework the lighting calculations
        [*] Camera Lookat math is incorrect (has weird z offset)